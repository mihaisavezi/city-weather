/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as CitiesIndexRouteImport } from './routes/cities/index'
import { Route as CitiesSearchRouteImport } from './routes/cities/search'
import { Route as CitiesAddRouteImport } from './routes/cities/add'
import { Route as CitiesEditIdRouteImport } from './routes/cities/edit.$id'
import { Route as CitiesDetailIdRouteImport } from './routes/cities/detail.$id'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const CitiesIndexRoute = CitiesIndexRouteImport.update({
  id: '/cities/',
  path: '/cities/',
  getParentRoute: () => rootRouteImport,
} as any)
const CitiesSearchRoute = CitiesSearchRouteImport.update({
  id: '/cities/search',
  path: '/cities/search',
  getParentRoute: () => rootRouteImport,
} as any)
const CitiesAddRoute = CitiesAddRouteImport.update({
  id: '/cities/add',
  path: '/cities/add',
  getParentRoute: () => rootRouteImport,
} as any)
const CitiesEditIdRoute = CitiesEditIdRouteImport.update({
  id: '/cities/edit/$id',
  path: '/cities/edit/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const CitiesDetailIdRoute = CitiesDetailIdRouteImport.update({
  id: '/cities/detail/$id',
  path: '/cities/detail/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/cities/add': typeof CitiesAddRoute
  '/cities/search': typeof CitiesSearchRoute
  '/cities': typeof CitiesIndexRoute
  '/cities/detail/$id': typeof CitiesDetailIdRoute
  '/cities/edit/$id': typeof CitiesEditIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/cities/add': typeof CitiesAddRoute
  '/cities/search': typeof CitiesSearchRoute
  '/cities': typeof CitiesIndexRoute
  '/cities/detail/$id': typeof CitiesDetailIdRoute
  '/cities/edit/$id': typeof CitiesEditIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/cities/add': typeof CitiesAddRoute
  '/cities/search': typeof CitiesSearchRoute
  '/cities/': typeof CitiesIndexRoute
  '/cities/detail/$id': typeof CitiesDetailIdRoute
  '/cities/edit/$id': typeof CitiesEditIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/cities/add'
    | '/cities/search'
    | '/cities'
    | '/cities/detail/$id'
    | '/cities/edit/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/cities/add'
    | '/cities/search'
    | '/cities'
    | '/cities/detail/$id'
    | '/cities/edit/$id'
  id:
    | '__root__'
    | '/'
    | '/cities/add'
    | '/cities/search'
    | '/cities/'
    | '/cities/detail/$id'
    | '/cities/edit/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CitiesAddRoute: typeof CitiesAddRoute
  CitiesSearchRoute: typeof CitiesSearchRoute
  CitiesIndexRoute: typeof CitiesIndexRoute
  CitiesDetailIdRoute: typeof CitiesDetailIdRoute
  CitiesEditIdRoute: typeof CitiesEditIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cities/': {
      id: '/cities/'
      path: '/cities'
      fullPath: '/cities'
      preLoaderRoute: typeof CitiesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cities/search': {
      id: '/cities/search'
      path: '/cities/search'
      fullPath: '/cities/search'
      preLoaderRoute: typeof CitiesSearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cities/add': {
      id: '/cities/add'
      path: '/cities/add'
      fullPath: '/cities/add'
      preLoaderRoute: typeof CitiesAddRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cities/edit/$id': {
      id: '/cities/edit/$id'
      path: '/cities/edit/$id'
      fullPath: '/cities/edit/$id'
      preLoaderRoute: typeof CitiesEditIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cities/detail/$id': {
      id: '/cities/detail/$id'
      path: '/cities/detail/$id'
      fullPath: '/cities/detail/$id'
      preLoaderRoute: typeof CitiesDetailIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CitiesAddRoute: CitiesAddRoute,
  CitiesSearchRoute: CitiesSearchRoute,
  CitiesIndexRoute: CitiesIndexRoute,
  CitiesDetailIdRoute: CitiesDetailIdRoute,
  CitiesEditIdRoute: CitiesEditIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
